<?php


namespace App\Modules\BackEnd\Controllers;

use App\Models\Category;
use App\Models\VideosCate;
use App\Models\Video as THIS;
use Illuminate\Http\Request;

class VideoController extends BackendController
{
    protected $timeStamp = 'created';

    //config controller, ez for copying and paste
    public function __construct(){
        parent::__construct(new THIS(),[
            // [
            //     'Link_video' => 'required',
            // ],
            // [
            //     'Link_video.required' => 'link videos không được bỏ trống',
            // ]
        ]);
        \View::share('catOpt', Category::getCat(3));
        $this->registerAjax('load-video', 'ajaxLoadVideo');
    }

    public function index(Request $request){
        // $author = 'active DESC, last_active DESC, last_login DESC, id DESC';
        $order = 'created DESC';
        $cond = [];
        if ($request->status != '') {
            $cond[] = ['status', $request->status];
        } else {
            $cond[] = ['status', '>', -1];
        }

        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        
       
        if(!empty($request->time_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
            array_push($cond, ['created', '>=', $timeStamp]);
        }

        if(!empty($request->time_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
            array_push($cond, ['created', '<=', $timeStamp]);
        }

        if(!empty($request->publish_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->publish_from);
            array_push($cond, ['published', '>=', $timeStamp]);
        }

       
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request,
            'customer' => ''
        ]);
    }

    public function showEditForm($id){
        $data = THIS::find($id);
        $preview = request('preview');
        $type_view = request('view', 'full');
        if(empty($data)){
            return $this->notfound($id);
        }
        set_old($data);
        if(isset($data)){
            return $this->returnView('edit', [
                'obj' => $data,
                'preview' => $preview,
                'view' => $type_view,
            ]);
        }
        return $this->notfound($id);
    }

    public function buildValidate(Request $request){
        $this->addValidate(
            [
                'video_id' => 'unique:videos,video_id,'.$this->editID,
            ],
            [
                'video_id.unique' => 'ID video đã tồn tại'
            ]
        );
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        
        if(!empty($request->image))
        {
            $this->model->image = $request->image;
        }
        else
        {
            $this->model->image = '';
        }
        
        $id = $request->fucking_video_id;

        if($id){
            $this->model->video_id      = $id;
            $this->model->thumbnail     = 'http://i3.ytimg.com/vi/'.$id.'/hqdefault.jpg';
            $this->model->link_video    = 'https://www.youtube.com/embed/'.$id;
        }

        parent::beforeSave($request); // TODO: Change the autogenerated stub
        
        $this->model->status = ($request->status) ? $request->status : 1;

         // xoa truong thua
         unset($this->model->cate,$this->model->fucking_video_id);
        
    }

   

    public function ajaxLoadVideo(Request $request) {
        if($request->id > 0) {
            $data = $this->model::find($request->id);
            if ($data) {
                return \Lib::ajaxRespond(true, 'success', $data->videos_id);

            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

}