<?php


namespace App\Modules\BackEnd\Controllers;

use App\Models\Stores as THIS;
use Illuminate\Http\Request;
use App\Models\GeoProvince;
use App\Models\GeoDistrict;
use App\Libs\Lib;
use App\Models\StoreImage;

class StoresController extends BackendController
{
    protected $recperpage = 10;
    public function __construct()
    {
        parent::__construct(new THIS(),[
            [
                'name_store' => 'required|max:250',
            ],
            [
                'name_store.required' => 'Tên đại lý không được bỏ trống',
            ]
        ]);
        \View::share('provinces', GeoProvince::getAll());
        $this->registerAjax('get_districts_by_province_id', 'ajaxGetDistrictsByProvinceId');
        $this->registerAjax('load', 'ajaxImageLoad', 'view');
        $this->registerAjax('upload_img', 'ajaxItemUploadMulti', 'add');
        $this->registerAjax('remove_img', 'ajaxItemImgDel', 'delete');
        $this->registerAjax('change-pos', 'ajaxItemChangePos', 'edit');
    }

    public function index(Request $request){
        $order = 'created DESC, id DESC';
        $cond = [];
        if ($request->status != '') {
            $cond[] = ['status', $request->status];
        } else {
            $cond[] = ['status', '!=', THIS::STATUS_DETELE];
        }
        if($request->district_id != ''){
            $cond[] = ['district_id' , '=' , $request->district_id];
        }
        if($request->name_store != ''){
            $cond[] = ['name_store','LIKE','%'.$request->name_store.'%'];
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::where('status', '!=', THIS::STATUS_DETELE)->orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'search_data' => $request,
            'data' => $data,
        ]);
    }

    public function showAddForm() {
        $preview = request('preview');
        $type_view = request('view', 'full');
        return $this->returnView('edit', [
            'preview' => $preview,
            'view' => $type_view,
        ]);
    }

    public function showEditForm($id){
        $obj = THIS::find($id);
        if(!empty($obj)){
            $obj['province_id'] = optional(optional($obj->district)->province)->id;
            set_old($obj);
            $preview = request('preview');
            $type_view = request('view', 'full');
            return $this->returnView('edit', [
                'preview' => $preview,
                'view' => $type_view,
                'obj' => $obj,
            ]);
        }
        return $this->notfound($id);
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        $arr_unset = ['province_id'];
        parent::beforeSave($request, $ignore_ext); // TODO: Change the autogenerated stub
        $this->uploadImage($request,$request->title,'image');
        if($this->model->removed == THIS::REMOVED_NO && $this->model->status != -1) {
            if($request->status == 'pending') {
                $this->model->status = THIS::STATUS_INACTIVE;
            }else {
                $this->model->status = @$request->status?:THIS::STATUS_INACTIVE;
            }
        }else {
            $this->model->status = -1;
        }
        $this->model->created = time();
        // xoa cac truong thua
        $this->unsetFields($arr_unset);
        unset($this->model->files,$this->model->uploadify_hotel_img,$this->model->img_upload_for_add);
    }
    public function afterSave(Request $request)
    {
        if(!empty($request->img_upload_for_add)) {
            StoreImage::whereIn('id',explode(',',$request->img_upload_for_add))->update(['object_id'=>$this->model->id]);
        }
    }
    public function ajaxGetDistrictsByProvinceId(Request $request)
    {
        if ($request->province_id > 0) {
            $districts = GeoDistrict::where('Province_ID', $request->province_id)->get();
            if ($districts) {
                $data = '<option value="">-- Quận/ Huyện --</option>';
                foreach ($districts as $k => $v) {
                    $selected = '';
                    if ($request->district_id == $v->id) {
                        $selected = 'selected';
                    }
                    $data .= '<option value="' . $v->id . '" ' . $selected . '>' . $v->Name_VI . '</option>';
                }
                return Lib::ajaxRespond(true, 'success', $data);
            }
        }
        return Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
    protected function ajaxImageLoad(Request $request){
        return \Lib::ajaxRespond(true, 'ok', ['images' => THIS::getImageGallery($request->object_id,$request->type)]);
    }
    protected function ajaxItemUploadMulti(Request $request){
        if ($request->hasFile('Filedata')) {
            $image = $request->file('Filedata');
            if ($image->isValid()) {
                $title = basename($image->getClientOriginalName(), '.'.$image->getClientOriginalExtension());
                $fname = $this->uploadImage($request, $title, 'Filedata');
                if(!empty($fname)){
                    $imgGallery = new StoreImage();
                    $imgGallery->object_id = $request->object_id;
                    $imgGallery->image = $fname;
//                    $imgGallery->size = $image->getClientSize();
//                    $imgGallery->type = $image->getClientMimeType();
                    $imgGallery->created = time();
                    $imgGallery->type = $request->type;
//                    $imgGallery->changed = time();
                    $imgGallery->user_id = \Auth::id();
//                    $imgGallery->uname = \Auth::user()->user_name;
//                    $imgGallery->lang = $request->lang;
                    $imgGallery->sort = StoreImage::getSortInsert($request->lang);
                    $imgGallery->save();

                    if(empty($imgGallery->object_id)) {
                        return \Lib::ajaxRespond(true, 'ok', ['id' => $imgGallery->id]);
                    }else {
                        return \Lib::ajaxRespond(true, 'ok', ['images' => THIS::getImageGallery($request->object_id,$request->type)]);
                    }
                }
                return \Lib::ajaxRespond(false, 'Upload ảnh thất bại!');
            }
            return \Lib::ajaxRespond(false, 'File không hợp lệ!');
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy ảnh!');
    }
    protected function ajaxItemImgDel(Request $request){
        if($request->id > 0){
            $data = StoreImage::where('id',$request->id)->where('object_id',$request->object_id)->where('type',$request->type)->first();
            if($data){
                $data->delete();
                return \Lib::ajaxRespond(true, 'ok', ['images' => THIS::getImageGallery($request->object_id,$request->type)]);
            }
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }
    protected function ajaxItemChangePos(Request $request){
        if($request->id > 0 && $request->next > 0 && $request->type != ''){
            $next = StoreImage::find($request->next);
            $cur  = StoreImage::find($request->id);
            if($next && $cur){
                $cur->sort = $request->type == 'left' ? ($next->sort + 1) : ($next->sort - 1);
                $cur->save();
                return \Lib::ajaxRespond(true, 'ok');
            }
        }
        return \Lib::ajaxRespond(false, 'Dữ liệu không chính xác');
    }
}