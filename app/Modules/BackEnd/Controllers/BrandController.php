<?php

namespace App\Modules\BackEnd\Controllers;

use App\Models\BrandImage;
use Illuminate\Http\Request;
use App\Models\Brand as THIS;


class BrandController extends BackendController
{

    protected $recperpage = 9999;
    protected $timeStamp = 'created';

    public function __construct(){
        parent::__construct(new THIS(),[
            [
                'title' => 'required|min:3|max:250',
                // 'sort' => 'numeric',
            ],
            [
                'title.required' => 'Tiêu đề thương hiệu không được bỏ trống',
                'title.min' => 'Tiêu đề thương hiệu tối thiểu 3 ký tự',
                'title.max' => 'Tiêu đề thương hiệu tối đa 250 ký tự',
                // 'sort.numeric' => 'Sắp xếp phải là kiểu số',
            ]
        ]);
        \View::share('type', THIS::getType());
        $this->registerAjax('get-cat', 'ajaxGetCat');
        $this->registerAjax('fetch-cat-lang', 'ajaxFetchCat');
        $this->registerAjax('removeImageCategory' , 'ajaxRemoveImageCat');
        $this->registerAjax('removeimg', 'ajaxItemImgDel', 'delete');
    }

    public function ajaxItemImgDel(Request $request)
    {
        if($request->id > 0){
            $data = THIS::where('id', $request->id)->where('image', $request->img)->first();
            if($data){
                $data->image = null;
                $data->save();
            }
            return \Lib::ajaxRespond(true, 'ok', ['json' => 'xóa ảnh']);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    public function index(Request $request){
        $order = 'created DESC';
        $cond = [];
        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
        if($request->type != ''){
            $cond[] = ['type','=',$request->type];
        }
        if ($request->status != '') {
            $cond[] = ['status', $request->status];
        } else {
            $cond[] = ['status', '!=', -1];
        }
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        $time = explode(' - ', \request('time_between'));
        if(is_array($time)) {
            foreach($time as $k => $t) {
                $timeStamp = \Lib::getTimestampFromVNDate($t);
                if (!$k) {
                    array_push($cond, ['created', '>=', $timeStamp]);
                }else {
                    array_push($cond, ['created', '<=', $timeStamp]);
                }
            }
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->where('status' , '>=' , THIS::STATUS_INACTIVE)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::where('status' , '>=' , THIS::STATUS_INACTIVE)->orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request
        ]);
    }

    public function fetchResult($data){
        $tmp = [];
        $type = THIS::getType();
        foreach($data as $key => $item){
            if(isset($type[$item->type])) {
                if(!isset($tmp[$item->type])){
                    $tmp[$item->type] = [
                        'title' => $type[$item->type],
                        'type' => $item->type,
                        'cats' => []
                    ];
                }
                if($item->pid == 0){
                    $tmp[$item->type]['cats'][$item->id] = [
                        'data' => $item,
                        'sub' => []
                    ];
                    unset($data[$key]);
                }elseif(isset($tmp[$item->type]['cats'][$item->pid])){
                    $tmp[$item->type]['cats'][$item->pid]['sub'][$item->id] = [
                        'data' => $item,
                        'sub' => []
                    ];
                    unset($data[$key]);
                }
            }
        }
        foreach($data as $key => $item){
            if(isset($type[$item->type])) {
                foreach ($tmp[$item->type]['cats'] as $i => $menu){
                    foreach($menu['sub'] as $k => $sub){
                        if($k == $item->pid){
                            $tmp[$item->type]['cats'][$i]['sub'][$k]['sub'][$item->id] = $item;
                        }
                    }
                }
            }
        }
        return $tmp;
    }

    public function showAddForm() {
        $preview = request('preview');
        $type_view = request('view', 'full');
        return $this->returnView('edit', [
            'preview' => $preview,
            'view' => $type_view,
        ]);
    }

    public function buildValidate(Request $request){

        parent::buildValidate($request); // TODO: Change the autogenerated stub
        if ($request->hasFile('image')) {
            $this->addValidate(['image' => ['mimes:jpeg,jpg,png,gif,webp','Ảnh đại diện']]);
        }
        if ($request->hasFile('image_seo')) {

            $this->addValidate(['image_seo' => ['mimes:jpeg,jpg,png,gif,webp','Ảnh seo']]);
        }
    }


    public function showEditForm($id){
        $data = THIS::find($id);
        $preview = request('preview');
        $type_view = request('view', 'full');
        if(empty($data)){
            return $this->notfound($id);
        }
        set_old($data);
        $images_brd = BrandImage::where('brand_id', '=' , $id)->get();
        $data_image = [];
        foreach ($images_brd as $item){
            $data_image[] = [
                'name_image' => \ImageURL::getImageUrl($item->image , 'brand' , 'original'),
                'id' => $item->id,
            ];
        }
        if(isset($data)){
            return $this->returnView('edit', [
                'obj' => $data,
                'image' => @json_encode($data_image),
                'preview' => $preview,
                'view' => $type_view,
            ]);
        }
        return $this->notfound($id);
    }



}