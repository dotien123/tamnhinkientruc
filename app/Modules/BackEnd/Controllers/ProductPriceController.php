<?php

namespace App\Modules\BackEnd\Controllers;

use Illuminate\Http\Request;
use App\Models\ProductPrice as THIS;


class ProductPriceController extends BackendController
{

    protected $recperpage = 9999;
    protected $timeStamp = 'created';

    public function __construct(){
        parent::__construct(new THIS(),[
            [
                'title' => 'required|max:250',
            ],
            [
                'title.required' => 'Tiêu đề không được bỏ trống',
                'title.max' => 'Tiêu đề không được quá 250 ký tự',
            ]
        ]);       
    }

    public function index(Request $request){
        $order = 'created DESC';
        $cond = [['status','>',-1]];
        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
       
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }

        $time = explode(' - ', \request('time_between'));
        if(is_array($time)) {
            foreach($time as $k => $t) {
                $timeStamp = \Lib::getTimestampFromVNDate($t);
                if (!$k) {
                    array_push($cond, ['created', '>=', $timeStamp]);
                }else {
                    array_push($cond, ['created', '<=', $timeStamp]);
                }
            }
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request
        ]);
    }

    public function buildValidate(Request $request){

        parent::buildValidate($request); // TODO: Change the autogenerated stub
        if ($request->hasFile('image')) {
            $this->addValidate(['image' => ['mimes:jpeg,jpg,png,gif,webp','Ảnh đại diện']]);
        }
        if ($request->hasFile('image_seo')) {

            $this->addValidate(['image_seo' => ['mimes:jpeg,jpg,png,gif,webp','Ảnh seo']]);
        }
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request);

        if(!empty($request->price_to)) {
            $to = str_replace('VNĐ', '', ($request->price_to));
            $this->model->price_to = \Lib::convertMoneyToInt($to, '.');
        }

        if(!empty($request->price_from)) {
            $from = str_replace('VNĐ', '', $request->price_from);
            $this->model->price_from = \Lib::convertMoneyToInt($from, '.');
        }
        unset($this->model->files);

    }

    public function showAddForm() {
        $preview = request('preview');
        $type_view = request('view', 'full');
        return $this->returnView('edit', [
            'preview' => $preview,
            'view' => $type_view,
        ]);
    }

    public function showEditForm($id){
        $data = THIS::find($id);
        $preview = request('preview');
        $type_view = request('view', 'full');
        if(empty($data)){
            return $this->notfound($id);
        }
        set_old($data);
        //$images_brd = BrandImage::where('brand_id', '=' , $id)->get();
        $data_image = [];
       
        if(isset($data)){
            return $this->returnView('edit', [
                'obj' => $data,
                'image' => @json_encode($data_image),
                'preview' => $preview,
                'view' => $type_view,
            ]);
        }
        return $this->notfound($id);
    }



}