<?php

namespace App\Modules\BackEnd\Controllers;

use App\Models\Category;
use App\Models\NewsCate;
use Illuminate\Http\Request;

use App\Models\Tag;
use App\Models\Statistics;
use App\Models\Activity as THIS;
use App\Models\Author;

class ActivityController extends BackendController
{
    protected $timeStamp = 'created';
    protected $tagID = 1;
    //config controller, ez for copying and paste
    public function __construct(){
        parent::__construct(new THIS(),[
            [
                'title' => 'required|max:250',
                'title_seo' => 'max:250',
                'sort' => 'numeric',
                'link' => 'url',
            ],
            [
                'title.required' => 'Tiêu đề không được bỏ trống.',
                'title.max' => 'Tiêu đề không được quá 250 ký tự.',
                'sort.numeric' => 'Sắp xếp phải là kiểu số.',
                'link.url' => 'Liên kết tĩnh không đúng định dạng.',
            ]
        ]);

        \View::share('catOpt', Category::getCat(2));
        \View::share('tagType', $this->tagID);
        $this->registerAjax('delete', 'ajaxDelete', 'delete');
    }

    public function index(Request $request){
        // $author = 'active DESC, last_active DESC, last_login DESC, id DESC';
        $order = 'sort DESC, id DESC';
        $cond = [];
        if ($request->status != '') {
            $cond[] = ['status', $request->status];
        } else {
            $cond[] = ['status', '!=', -1];
        }
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        if($request->lang != ''){
            $cond[] = ['lang','=',$request->lang];
        }
        if($request->type != ''){
            $cond[] = ['cate_par','=',$request->type];
        }
        if(!empty($request->time_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_from);
            array_push($cond, ['created', '>=', $timeStamp]);
        }
        if(!empty($request->time_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->time_to, true);
            array_push($cond, ['created', '<=', $timeStamp]);
        }
        if(!empty($request->publish_from)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->publish_from);
            array_push($cond, ['published', '>=', $timeStamp]);
        }
        if(!empty($request->publish_to)){
            $timeStamp = \Lib::getTimestampFromVNDate($request->publish_to, true);
            array_push($cond, ['published', '<=', $timeStamp]);
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }

        return $this->returnView('index', [
            'lsObj' => $data,
            'search_data' => $request,
            'admin' => '',
            'customer' => ''
        ]);
    }

    public function showAddForm() {
        $preview = request('preview');
        $type_view = request('view', 'full');
        return $this->returnView('edit', [
            'preview' => $preview,
            'view' => $type_view,
        ]);
    }

    public function showEditForm($id){
        $preview = request('preview');
        $type_view = request('view', 'full');
        $obj = THIS::find($id);
        set_old($obj);
        // dump(THIS::with('detail')->find($id));
        return $this->returnView('edit', [
            'obj' => $obj,
            'preview' => $preview,
            'view' => $type_view,
        ]);
    }

    public function buildValidate(Request $request){
        if ($request->hasFile('image')) {
            $this->addValidate(['image' => ['mimes:jpeg,jpg,png,gif','Ảnh đại diện']]);
        }
        if ($request->hasFile('image_seo')) {
            $this->addValidate(['image_seo' => ['mimes:jpeg,jpg,png,gif,webp','Ảnh seo']]);
        }
    }



    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request); // TODO: Change the autogenerated stub

        if ($request->hasFile('image_seo')) {
            $this->uploadImage($request, $request->title_seo, 'image_seo');
        }
        // xoa truong thua
        unset($this->model->files);
    }

    function ajaxDelete(Request $request) {
        $id = $request->id?:0;
        if(!$id) {
            return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu!');
        }
        $obj = THIS::find($id);
        if($obj){
            $removed = ($request->removed == "true") ? THIS::REMOVED_NO : THIS::REMOVED_YES;
            $obj->update(['removed' => $removed]);
            if($request->removed != "true") {
                $this->delete($id);
            }else {
                $obj->update(['status' => THIS::STATUS_ACTIVE]);
            }
            return \Lib::ajaxRespond(true, 'Xóa dữ liệu thành công');
        }
        return \Lib::ajaxRespond(true, 'Xóa dữ liệu thành công');

    }


}
