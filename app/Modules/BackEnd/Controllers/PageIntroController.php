<?php


namespace App\Modules\BackEnd\Controllers;

use Illuminate\Http\Request;
use App\Models\PageIntro as THIS;
use App\Models\IntroDetail;
use App\Libs\LoadDynamicRouter;
class PageIntroController extends BackendController
{
    public function __construct()
    {
        parent::__construct(new THIS(),[
            [
                'title' => 'required|max:250',
            ],
            [
                'title.required' => 'Trường tiêu đề không được rỗng !!!',
            ],
        ]);
        // $this->registerAjax('delete', 'ajaxDelete', 'delete');
        $this->registerAjax('removeimg', 'ajaxItemImgDel', 'delete');
        LoadDynamicRouter::loadRoutesFrom('FrontEnd');
    }

    public function ajaxItemImgDel(Request $request)
    {
        if($request->id > 0){
            $data = THIS::where('id', $request->id)->where('image', $request->img)->first();
            if($data){
                $data->image = null;
                $data->save();
            }
            return \Lib::ajaxRespond(true, 'ok', ['json' => 'xóa ảnh']);
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

    public function index(Request $request){
        $order = 'published DESC, id DESC';
        $cond = [];
        if ($request->status != '') {
            $cond[] = ['status', $request->status];
        }else {
            $cond[] = ['status','>',-1];
        }
        if ($request->type != '') {
            $cond[] = ['type', $request->type];
        } 
        if($request->title != ''){
            $cond[] = ['title','LIKE','%'.$request->title.'%'];
        }
        if(!empty($request->lang)){
            array_push($cond, ['lang', '=', $request->lang]);
        }
        $time = explode(' - ', \request('time_between'));
        if(is_array($time)) {
            foreach($time as $k => $t) {
                $timeStamp = \Lib::getTimestampFromVNDate($t);
                if (!$k) {
                    array_push($cond, ['published', '>=', $timeStamp]);
                }else {
                    array_push($cond, ['published', '<=', $timeStamp]);
                }
            }
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->where('status', '>=' , THIS::STATUS_INACTIVE)->paginate($this->recperpage);
        }
        $type = THIS::getType();
        return $this->returnView('index', [
            'search_data' => $request,
            'data' => $data,
            'type' => $type,
        ]);
    }

    public function showAddForm() {
        $preview = request('preview');
        $type_view = request('view', 'full');
        $type = THIS::getType();
        return $this->returnView('edit', [
            'preview' => $preview,
            'view' => $type_view,
            'type' => $type,
        ]);
    }


    public function  beforeSave(Request $request, $ignore_ext = [])
    {
        // dd($request->all());
        parent::beforeSave($request, $ignore_ext); // TODO: Change the autogenerated stub
      
        // $this->process_laters->advantages = IntroDetail::returnAdvantages($request,$arr_unset);
        $this->model->title_seo = !empty($request->title_seo) ? $request->title_seo : $request->title;
        // $this->model->author = (\Auth::check()) ? \Auth::user()->id : 'Vô danh';
        $this->model->alias = isset($request->alias) ? $request->alias : str_slug($request->title);

        if($this->model->removed == THIS::REMOVED_NO && $this->model->status != -1) {
            if($request->status == 'pending') {
                $this->model->status = THIS::STATUS_INACTIVE;
            }else {
                $this->model->status = @$request->status?:THIS::STATUS_INACTIVE;
            }
        }else {
            $this->model->status = -1;
        }
        $this->model->created = time();

        if ($request->hasFile('image_seo')) {
            $this->uploadImage($request, $request->title_seo, 'image_seo');
        }

        if(!empty($request->published)){
            $this->model->published = \Lib::getTimestampFromVNDate($request->published);
        }
        // xoa cac truong thua
        // $this->unsetFields($arr_unset);
        unset($this->model->files);
    }

   
    public function showEditForm($id){
        $obj = THIS::find($id);
        $type = THIS::getType();
        if(!empty($obj)){
            set_old($obj);
            $preview = request('preview');
            $type_view = request('view', 'full');
            return $this->returnView('edit', [
                'preview' => $preview,
                'view' => $type_view,
                'obj' => $obj,
                'type' => $type,
            ]);
        }
        return $this->notfound($id);
    }

    function ajaxDelete(Request $request) {
        $id = $request->id?:0;
        if(!$id) {
            return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu!');
        }
        $obj = THIS::find($id);
        if(!empty($obj)){
            $removed = ($request->removed == "true") ? THIS::REMOVED_NO : THIS::REMOVED_YES;
//            $obj->update(['removed' => $removed]);
            $obj['removed'] = $removed;
            $obj->save();
            if($request->removed != "true") {
                $this->delete($id);
            }else {
                $obj->update(['status' => THIS::STATUS_INACTIVE]);
            }
            return \Lib::ajaxRespond(true, 'Xóa dữ liệu thành công');
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy bản ghi');

    }
}