<?php

namespace App\Modules\BackEnd\Controllers;

use Illuminate\Http\Request;

use App\Models\Purchase as THIS;


class PurchaseController extends BackendController
{
    protected $timeStamp = 'created';
    protected $titleField= 'email';
    protected $recperpage = 10;

    //config controller, ez for copying and paste
    public function __construct(){
        parent::__construct(new THIS(), [
            [
                'fullname' => 'required|max:250',
                'email' => 'required|email',
            ],
            [
                'fullname.required' => 'Họ và tên không được bỏ trống',
                'fullname.max' => 'Tiêu đề không được quá 250 ký tự',
                'email.required' => 'Email không được bỏ trống',
            ]
        ]);
        $this->registerAjax('popup-preview', 'ajaxPreview', 'view');
    }

    public function index(Request $request){
        $order = 'created DESC, id DESC';
        $cond = [['status','>=', THIS::STATUS_ACTIVE]];
        if($request->fullname != ''){
            $cond[] = ['fullname', 'LIKE' , '%'.$request->fullname.'%'];
        }
        if($request->email != ''){
            $cond[] = ['email','LIKE','%'.$request->email.'%'];
        }
        if($request->phone != ''){
            $cond[] = ['phone','LIKE','%'.$request->phone.'%'];
        }
        $time = explode(' - ', \request('time_between'));
        if(is_array($time)) {
            foreach($time as $k => $t) {
                $timeStamp = \Lib::getTimestampFromVNDate($t);
                if (!$k) {
                    array_push($cond, ['created', '>=', $timeStamp]);
                }else {
                    array_push($cond, ['created', '<=', $timeStamp]);
                }
            }
        }
        if(!empty($cond)) {
            $data = THIS::where($cond)->orderByRaw($order)->paginate($this->recperpage);
        }else{
            $data = THIS::orderByRaw($order)->paginate($this->recperpage);
        }
        return $this->returnView('index', [
            'data' => $data,
            'search_data' => $request,
        ]);
    }

    public function buildValidate(Request $request){
        $this->addValidate(['email' => 'unique:subscribers,email,'.$this->editID]);
    }

    public function showAddForm() {
        $preview = request('preview');
        $type_view = request('view', 'full');
        return $this->returnView('edit', [
            'preview' => $preview,
            'view' => $type_view,
        ]);
    }

    public function beforeSave(Request $request, $ignore_ext = [])
    {
        parent::beforeSave($request, $ignore_ext); // TODO: Change the autogenerated stub
        $this->model->created = time();
        $this->model->content = json_encode($this->model->content);
    }

    public function ajaxPreview(Request $request) {
        $obj = THIS::find($request->id);

        if($obj) {
            $tpl = [];
            $tpl['obj'] = $obj->toArray();
            $data = \View::make("BackEnd::pages.subscriber.include.preview", $tpl)->render();
            echo $data;die;
        }
        return \Lib::ajaxRespond(false, 'Không tìm thấy dữ liệu');
    }

}
